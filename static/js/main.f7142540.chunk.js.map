{"version":3,"sources":["components/AlertContainer/AlertMessage/index.tsx","components/AlertContainer/styles.ts","components/AlertContainer/index.tsx","hooks/alert.tsx","utils/index.ts","components/Cryptocoin/styles.ts","components/Cryptocoin/index.tsx","components/CryptocoinModal/index.tsx","components/Loading/index.tsx","components/CreditsLeft/index.tsx","services/api.ts","pages/Dashboard/index.tsx","hooks/index.tsx","App.tsx","index.tsx"],"names":["AlertMessage","alert","id","type","message","removeAlert","useAlert","Alert","variant","onClose","dismissible","size","Container","styled","div","AlertContainer","alerts","map","AlertContext","createContext","context","useContext","Error","AlertProvider","children","useState","setAlerts","addAlert","useCallback","uuid","state","filter","Provider","value","dateFormat","timestamp","Intl","DateTimeFormat","format","Date","button","Title","p","Price","VariationGroup","Variation","props","percent","LastUpdate","Cryptocoin","currency","data","onPress","Object","keys","quote","currencyCode","onClick","name","symbol","percent_change_24h","price","NumberFormat","style","minimumFractionDigits","percent_change_1h","toFixed","percent_change_7d","last_updated","hour","minute","second","hour12","CryptocoinModal","isVisible","toogleVisibility","Modal","show","onHide","animation","Header","closeButton","Image","src","logo","thumbnail","className","Body","description","category","Footer","tags","tag","Badge","Loading","Row","Col","CreditsLeft","credits","popover","Popover","as","Content","current_month","credits_left","current_day","OverlayTrigger","placement","overlay","api","axios","create","baseURL","Dashboard","isLoading","setIsLoading","showModal","setShowModal","apiUsage","setApiUsage","cryptoList","setCryptoList","cryptoInfo","setCryptoInfo","conversionCode","setConversionCode","handleSetConversionCode","localStorage","setItem","handleGetConversionCode","getItem","handleToggleModal","fetchCryptocoinsList","convert","get","params","then","response","catch","fetchCryptocoinInfo","fetchApiUsage","usage","useEffect","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Form","inline","FormControl","onChange","event","target","custom","Text","fluid","crypto","sm","md","xl","AppProvider","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7142540.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Alert } from 'react-bootstrap';\r\nimport { BiCommentError } from 'react-icons/bi';\r\n\r\nimport { useAlert, IAlertMessage } from '../../../hooks/alert';\r\n\r\ninterface IAlertMessageProps {\r\n  alert: IAlertMessage;\r\n}\r\n\r\nconst AlertMessage: React.FC<IAlertMessageProps> = ({ alert }) => {\r\n  const { id, type, message } = alert;\r\n  const { removeAlert } = useAlert();\r\n\r\n  return (\r\n    <>\r\n      <Alert variant={type} onClose={() => removeAlert(id)} dismissible>\r\n        <BiCommentError size=\"24\" />\r\n        &nbsp;\r\n        {message}\r\n      </Alert>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AlertMessage;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 60px;\r\n  padding: 30px;\r\n  overflow: hidden;\r\n`;\r\n","import React from 'react';\r\n\r\nimport { IAlertMessage } from '../../hooks/alert';\r\nimport AlertMessage from './AlertMessage';\r\n\r\nimport { Container } from './styles';\r\n\r\ninterface IAlertContainerProps {\r\n  alerts: IAlertMessage[];\r\n}\r\n\r\nconst AlertContainer: React.FC<IAlertContainerProps> = ({ alerts }) => {\r\n  return (\r\n    <Container>\r\n      {alerts.map(alert => (\r\n        <AlertMessage key={alert.id} alert={alert} />\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AlertContainer;\r\n","import React, { createContext, useCallback, useContext, useState } from 'react';\r\nimport { uuid } from 'uuidv4';\r\n\r\nimport AlertContainer from '../components/AlertContainer';\r\n\r\nexport interface IAlertMessage {\r\n  id: string;\r\n  type: 'warning' | 'danger';\r\n  message: string;\r\n}\r\n\r\ninterface IAlertContextData {\r\n  addAlert(alert: Omit<IAlertMessage, 'id'>): void;\r\n  removeAlert(id: string): void;\r\n}\r\n\r\nconst AlertContext = createContext<IAlertContextData>({} as IAlertContextData);\r\n\r\nfunction useAlert(): IAlertContextData {\r\n  const context = useContext(AlertContext);\r\n\r\n  if (!context) throw new Error('useAlert must be inside a AlertProvider');\r\n\r\n  return context;\r\n}\r\n\r\nconst AlertProvider: React.FC = ({ children }) => {\r\n  const [alerts, setAlerts] = useState<IAlertMessage[]>([]);\r\n\r\n  const addAlert = useCallback(\r\n    ({ type, message }: Omit<IAlertMessage, 'id'>) => {\r\n      const id = uuid();\r\n      const alert = { id, type, message };\r\n      setAlerts([...alerts, alert]);\r\n    },\r\n    [alerts],\r\n  );\r\n\r\n  const removeAlert = useCallback((id: string) => {\r\n    setAlerts(state => state.filter(alert => alert.id !== id));\r\n  }, []);\r\n\r\n  return (\r\n    <AlertContext.Provider value={{ addAlert, removeAlert }}>\r\n      {children}\r\n      <AlertContainer alerts={alerts} />\r\n    </AlertContext.Provider>\r\n  );\r\n};\r\n\r\nexport { useAlert, AlertProvider };\r\n","export const currencyFormat = (value: number, currency: string): string =>\r\n  new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency,\r\n    minimumFractionDigits: 5,\r\n  }).format(value);\r\n\r\nexport const hourFormat = (timestamp: string): string => {\r\n  const format = {\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n    hour12: false,\r\n  };\r\n\r\n  return new Intl.DateTimeFormat('en-IN', format).format(new Date(timestamp));\r\n};\r\n\r\nexport const dateFormat = (timestamp: string): string =>\r\n  new Intl.DateTimeFormat('en-IN').format(new Date(timestamp));\r\n","import styled from 'styled-components/';\r\n\r\nexport const Container = styled.button`\r\n  height: 175px;\r\n  width: 100%;\r\n  margin: 5px 0;\r\n  color: var(--primary-text-color);\r\n  border: 1px solid var(--primary-border-color);\r\n  border-radius: 4px;\r\n  background-image: linear-gradient(black, var(--secondary-background-color));\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  transition: 0.2s;\r\n\r\n  &:hover {\r\n    -moz-transform: translate(-2px, -2px);\r\n    -ms-transform: translate(-2px, -2px);\r\n    -o-transform: translate(-2px, -2px);\r\n    -webkit-transform: translate(-2px, -2px);\r\n    transform: translate(-2px, -2px);\r\n    border: 2px solid var(--secondary-border-color);\r\n    background-image: linear-gradient(var(--secondary-background-color), black);\r\n  }\r\n\r\n  &:active,\r\n  &:focus {\r\n    outline: none;\r\n    border: 2px solid var(--third-border-color);\r\n  }\r\n`;\r\n\r\nexport const Title = styled.p`\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin: 10px 0;\r\n\r\n  span {\r\n    font-weight: 400;\r\n    margin-left: 5px;\r\n    color: var(--secondary-text-color);\r\n  }\r\n`;\r\n\r\nexport const Price = styled.p`\r\n  color: var(--primary-text-color);\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n  margin-bottom: 10px;\r\n\r\n  svg {\r\n    margin: 0 6px 5px 0;\r\n  }\r\n`;\r\n\r\nexport const VariationGroup = styled.div`\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n`;\r\n\r\nexport const Variation = styled.div<{ percent: number }>`\r\n  p {\r\n    font-size: 15px;\r\n    font-weight: 100;\r\n    margin-bottom: 3px;\r\n  }\r\n\r\n  span {\r\n    color: ${props => (props.percent > 0 ? 'dodgerblue' : 'red')};\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nexport const LastUpdate = styled.p`\r\n  font-size: 10px;\r\n  font-weight: 100;\r\n  color: var(--secondary-text-color);\r\n`;\r\n","import React from 'react';\r\n\r\nimport { BsGraphUp, BsGraphDown } from 'react-icons/bs';\r\n\r\nimport ICryptocurrency from '../../interfaces/ICryptocurrency';\r\n\r\nimport { currencyFormat, hourFormat, dateFormat } from '../../utils';\r\n\r\nimport {\r\n  Container,\r\n  Title,\r\n  Price,\r\n  VariationGroup,\r\n  Variation,\r\n  LastUpdate,\r\n} from './styles';\r\n\r\ninterface ICryptocoinProps {\r\n  data: ICryptocurrency;\r\n  onPress: () => void;\r\n}\r\n\r\nconst Cryptocoin: React.FC<ICryptocoinProps> = (props: ICryptocoinProps) => {\r\n  const { data, onPress } = props;\r\n\r\n  const [currencyCode] = Object.keys(data.quote);\r\n\r\n  return (\r\n    <Container onClick={onPress}>\r\n      <Title>\r\n        {data.name}\r\n        <span>{`(${data.symbol})`}</span>\r\n      </Title>\r\n      <Price>\r\n        {data.quote[currencyCode].percent_change_24h > 0 ? (\r\n          <BsGraphUp size={20} />\r\n        ) : (\r\n          <BsGraphDown size={20} />\r\n        )}\r\n        {currencyFormat(data.quote[currencyCode].price, currencyCode)}\r\n      </Price>\r\n      <VariationGroup>\r\n        <Variation percent={data.quote[currencyCode].percent_change_1h}>\r\n          <p>1 hour</p>\r\n          <span>\r\n            {`${data.quote[currencyCode].percent_change_1h.toFixed(2)}%`}\r\n          </span>\r\n        </Variation>\r\n        <Variation percent={data.quote[currencyCode].percent_change_24h}>\r\n          <p>24 hours</p>\r\n          <span>\r\n            {`${data.quote[currencyCode].percent_change_24h.toFixed(2)}%`}\r\n          </span>\r\n        </Variation>\r\n        <Variation percent={data.quote[currencyCode].percent_change_7d}>\r\n          <p>7 days</p>\r\n          <span>\r\n            {`${data.quote[currencyCode].percent_change_7d.toFixed(2)}%`}\r\n          </span>\r\n        </Variation>\r\n      </VariationGroup>\r\n      <LastUpdate>\r\n        last update:&nbsp;\r\n        {hourFormat(data.quote[currencyCode].last_updated)}\r\n        &nbsp;\r\n        {dateFormat(data.quote[currencyCode].last_updated)}\r\n      </LastUpdate>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Cryptocoin;\r\n","import React from 'react';\r\nimport { Modal, Image, Badge } from 'react-bootstrap';\r\n\r\nimport ICryptocurrencyInfo from '../../interfaces/ICryptocurrencyInfo';\r\n\r\nimport './styles.css';\r\n\r\ninterface ICryoptoProps {\r\n  data: ICryptocurrencyInfo;\r\n  isVisible: boolean;\r\n  toogleVisibility: () => void;\r\n}\r\n\r\nconst CryptocoinModal: React.FC<ICryoptoProps> = (props: ICryoptoProps) => {\r\n  const { data, isVisible, toogleVisibility } = props;\r\n\r\n  return (\r\n    <Modal\r\n      show={isVisible}\r\n      onHide={toogleVisibility}\r\n      animation={false}\r\n      size=\"lg\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>\r\n          <Image src={data?.logo} thumbnail />\r\n          <div>\r\n            {data?.name}\r\n            &nbsp;\r\n            <span className=\"symbol-name\">{`(${data.symbol})`}</span>\r\n          </div>\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>{data?.description}</p>\r\n        <p>\r\n          Category:&nbsp;\r\n          {data.category}\r\n        </p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        {data.tags &&\r\n          data.tags.map(tag => (\r\n            <Badge variant=\"light\" key={tag}>\r\n              {tag}\r\n            </Badge>\r\n          ))}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CryptocoinModal;\r\n","import React from 'react';\r\n\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { ImSpinner10 } from 'react-icons/im';\r\n\r\nimport './styles.css';\r\n\r\ninterface ILoadingProps {\r\n  message?: string;\r\n}\r\n\r\nconst Loading: React.FC<ILoadingProps> = ({ message = '' }) => {\r\n  return (\r\n    <Row>\r\n      <Col className=\"loading\">\r\n        <ImSpinner10 size=\"100\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </ImSpinner10>\r\n        <p>{message}</p>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\n\r\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\r\nimport { MdCompareArrows } from 'react-icons/md';\r\n\r\nimport IApiUsage from '../../interfaces/IApiUsage';\r\n\r\nimport './styles.css';\r\n\r\ninterface ICreditsLeftProps {\r\n  credits: IApiUsage | undefined;\r\n}\r\n\r\nconst CreditsLeft: React.FC<ICreditsLeftProps> = (props: ICreditsLeftProps) => {\r\n  const { credits } = props;\r\n\r\n  const popover = (\r\n    <Popover id=\"popover\">\r\n      <Popover.Title as=\"h3\">Requests left:</Popover.Title>\r\n      {credits ? (\r\n        <Popover.Content>\r\n          <h6>{`month: ${credits.current_month.credits_left}`}</h6>\r\n          <h6>{`today: ${credits.current_day.credits_left}`}</h6>\r\n        </Popover.Content>\r\n      ) : (\r\n        <Popover.Content>\r\n          <h6>Fetching data...</h6>\r\n        </Popover.Content>\r\n      )}\r\n    </Popover>\r\n  );\r\n\r\n  return (\r\n    <OverlayTrigger placement=\"bottom\" overlay={popover}>\r\n      <MdCompareArrows size={32} id=\"popover-button\" />\r\n    </OverlayTrigger>\r\n  );\r\n};\r\n\r\nexport default CreditsLeft;\r\n","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://dio-crypto-api.herokuapp.com',\r\n});\r\n\r\nexport default api;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport {\r\n  Navbar,\r\n  Form,\r\n  FormControl,\r\n  Container,\r\n  Row,\r\n  Col,\r\n} from 'react-bootstrap';\r\n\r\nimport { GiCoins } from 'react-icons/gi';\r\n\r\nimport { useAlert } from '../../hooks/alert';\r\n\r\nimport Cryptocoin from '../../components/Cryptocoin';\r\nimport CryptocoinModal from '../../components/CryptocoinModal';\r\nimport Loading from '../../components/Loading';\r\nimport CreditsLeft from '../../components/CreditsLeft';\r\n\r\nimport ICryptocurrency from '../../interfaces/ICryptocurrency';\r\nimport ICryptocurrencyInfo from '../../interfaces/ICryptocurrencyInfo';\r\nimport IApiUsage from '../../interfaces/IApiUsage';\r\n\r\nimport api from '../../services/api';\r\n\r\nimport './styles.css';\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const [apiUsage, setApiUsage] = useState<IApiUsage>();\r\n  const [cryptoList, setCryptoList] = useState<ICryptocurrency[]>([]);\r\n  const [cryptoInfo, setCryptoInfo] = useState<ICryptocurrencyInfo>(\r\n    {} as ICryptocurrencyInfo,\r\n  );\r\n  const [conversionCode, setConversionCode] = useState<string>();\r\n\r\n  const { addAlert } = useAlert();\r\n\r\n  const handleSetConversionCode = useCallback((currencyCode: string) => {\r\n    localStorage.setItem('@CryptocurrencyApp:currency-code', currencyCode);\r\n    setConversionCode(currencyCode);\r\n  }, []);\r\n\r\n  const handleGetConversionCode = useCallback(() => {\r\n    const currencyCode = localStorage.getItem(\r\n      '@CryptocurrencyApp:currency-code',\r\n    );\r\n\r\n    if (!currencyCode) handleSetConversionCode('USD');\r\n    else setConversionCode(currencyCode);\r\n  }, [handleSetConversionCode]);\r\n\r\n  const handleToggleModal = useCallback(() => {\r\n    setShowModal(!showModal);\r\n  }, [showModal]);\r\n\r\n  const fetchCryptocoinsList = useCallback((convert: string | undefined) => {\r\n    api\r\n      .get('cryptocoins', { params: { convert } })\r\n      .then(response => {\r\n        const { data } = response.data;\r\n        setCryptoList(data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch(() =>\r\n        addAlert({\r\n          type: 'warning',\r\n          message:\r\n            'We are unable to get cryptocoin list data. Please try again later.',\r\n        }),\r\n      );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const fetchCryptocoinInfo = useCallback(\r\n    (id: number) => {\r\n      api\r\n        .get(`cryptocoins/${id}`)\r\n        .then(response => {\r\n          const { data } = response.data;\r\n          setCryptoInfo(data[id]);\r\n          handleToggleModal();\r\n        })\r\n        .catch(() =>\r\n          addAlert({\r\n            type: 'warning',\r\n            message:\r\n              'We are unable to get cryptocoin info data. Please try again later.',\r\n          }),\r\n        );\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [handleToggleModal],\r\n  );\r\n\r\n  const fetchApiUsage = useCallback(() => {\r\n    api.get('usage').then(response => {\r\n      const { data } = response.data;\r\n      setApiUsage(data.usage);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleGetConversionCode();\r\n  }, [handleGetConversionCode]);\r\n\r\n  useEffect(() => {\r\n    if (conversionCode) fetchCryptocoinsList(conversionCode);\r\n  }, [conversionCode, fetchCryptocoinsList]);\r\n\r\n  useEffect(() => {\r\n    fetchApiUsage();\r\n  }, [cryptoList, cryptoInfo, fetchApiUsage]);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\r\n        <Navbar.Brand\r\n          href=\"\"\r\n          onClick={() => fetchCryptocoinsList(conversionCode)}\r\n        >\r\n          <GiCoins className=\"d-inline-block align-top\" size=\"30\" />\r\n          <span className=\"title\"> Cryptocurrency App</span>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse className=\"responsive-navbar-nav justify-content-end\">\r\n          <Form inline>\r\n            <FormControl\r\n              id=\"currency-code-select\"\r\n              className=\"mr-sm-2 mt-sm-1\"\r\n              value={conversionCode}\r\n              onChange={event => handleSetConversionCode(event.target.value)}\r\n              as=\"select\"\r\n              custom\r\n            >\r\n              <option value=\"USD\">USD</option>\r\n              <option value=\"BRL\">BRL</option>\r\n            </FormControl>\r\n          </Form>\r\n          <Navbar.Text>\r\n            <CreditsLeft credits={apiUsage} />\r\n          </Navbar.Text>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      <Container fluid>\r\n        {isLoading && <Loading message=\"Waking up the backend instance...\" />}\r\n        <Row>\r\n          {cryptoList.map(crypto => (\r\n            <Col sm={6} md={4} xl={3} key={crypto.id}>\r\n              <Cryptocoin\r\n                data={crypto}\r\n                onPress={() => fetchCryptocoinInfo(crypto.id)}\r\n              />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </Container>\r\n      <CryptocoinModal\r\n        data={cryptoInfo}\r\n        isVisible={showModal}\r\n        toogleVisibility={handleToggleModal}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\n\r\nimport { AlertProvider } from './alert';\r\n\r\nconst AppProvider: React.FC = ({ children }) => (\r\n  <AlertProvider>{children}</AlertProvider>\r\n);\r\n\r\nexport default AppProvider;\r\n","import React from 'react';\r\n\r\nimport Dashboard from './pages/Dashboard';\r\nimport AppProvider from './hooks';\r\n\r\nimport './styles/global.css';\r\n\r\nconst App: React.FC = () => (\r\n  <AppProvider>\r\n    <Dashboard />\r\n  </AppProvider>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}